# -*- coding: utf-8 -*-
"""hdf5_movie_maker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X_XB-4_I1vITiP3WlJF_qmtvP8eYVMxk
"""

from google.colab import drive
import h5py
drive.mount('/content/drive')
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
import imageio
import pandas as pd

!pip install yt
import yt

cd /content/drive/MyDrive/firstoutput

snapshot_dir = '/content/drive/MyDrive/firstoutput'

# Iterate through all HDF5 files in the directory
# Define unit base for the simulation
unit_base = {
"UnitLength_in_cm": 3.08568e21,
"UnitMass_in_g": 1.989e43,
"UnitVelocity_in_cm_per_s": 100000,
}

# Set the bounding box for the simulation
bbox_lim = 1e5
bbox = [[-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim]]

for hdf5_file in os.listdir(snapshot_dir):
    if hdf5_file.startswith("snapshot_"):
        # Define the full path to the HDF5 file
        hdf5_path = os.path.join(snapshot_dir, hdf5_file)

        # Load the dataset using yt
        ds = yt.load(hdf5_path, unit_base=unit_base, bounding_box=bbox)
        ds.index

        # Access all data in the dataset
        ad = ds.all_data()

        # Create a projection plot along the x-axis for gas density
        px = yt.ProjectionPlot(ds, "x", ("gas", "density", ), center=[25000, 25000, 25000], width=[65000, 65000, 65000])
        px.show()

        # Save the projection plot as a JPG file
        jpg_file = os.path.splitext(hdf5_file)[0] + '.jpg'
        jpg_path = os.path.join(snapshot_dir, 'first snapshots', jpg_file)
        px.save(jpg_path)

unit_base = {
"UnitLength_in_cm": 3.08568e21,
"UnitMass_in_g": 1.989e43,
"UnitVelocity_in_cm_per_s": 100000,
}
bbox_lim = 1e5
bbox = [[-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim]]

framerate = 5
snapshots_dir = "/content/drive/MyDrive/final snapshots/snapshots"
movie_dir = "/content/drive/MyDrive"

def filepathNum(filepath):
    # take filename out of filepath
    filename = os.path.basename(filepath)
    # take the value, between the _ and the .
    number = filename.split("_")[-1]
    number = number.split(".")[0]
    # Turn it into integer
    number = int(number)
    # Return result
    return number

import os
import imageio

def create_movie(input_dir, output_file, file_prefix='', framerate=24):
    # Get all JPG files in the input directory
    jpg_files = sorted([f for f in os.listdir(input_dir) if f.startswith(file_prefix) and f.endswith('.jpg')])

    # Create a list to store the images
    images = []

    # Read each JPG file and append to the images list
    for jpg_file in jpg_files:
        image_path = os.path.join(input_dir, jpg_file)
        images.append(imageio.imread(image_path))

    # # Create the movie (MP4) using imageio
    # output_path = os.path.join(input_dir, output_file)
    # imageio.mimsave(output_path, images, fps=framerate)

# # Example usage
# input_directory = '/content/drive/MyDrive/final snapshots/snapshots'
# output_movie_file = 'FINAL lcdm-gas.mp4'
# create_movie(input_directory, output_movie_file, file_prefix='snapshot_', framerate=15)