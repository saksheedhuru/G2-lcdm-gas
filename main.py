# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_XEF1ZMPZVPtuQY1un1RZofHR4bQPmni

## Demonstration of yt

## Sakshee Dhuru: Practical #6

### Importing yt
"""

!pip install yt

import yt
import numpy as np
import matplotlib.pyplot as plt  #Probably, we don't need this, but it's habit at this point.

"""### Terminal commands from jupyter notebooks

You can execute terminal commands from jupyter notebooks if you precede the line with !
"""

!pwd

!cd output /content/drive/MyDrive



"""###  Now to load in the data file

Define the file name for the snapshot we want to look at.
"""

fname = "snapshot_000.hdf5"

"""Tell yt about some parameters for our simulation."""

unit_base = {
    "UnitLength_in_cm": 3.08568e21,
    "UnitMass_in_g": 1.989e43,
    "UnitVelocity_in_cm_per_s": 100000,
}

bbox_lim = 1e5  # kpc

bbox = [[-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim], [-bbox_lim, bbox_lim]]

"""You can check the values for unit_base by looking in the output/parameters-usedvalues file for your run.  But I think these should work.

Now we load the data.
"""

ds = yt.load(fname, unit_base=unit_base, bounding_box=bbox)  #Load in the dataset.
ds.index  # Honestly, I am not sure if this is necessary.
ad = ds.all_data()  #Select the full simulation domain to work with.

"""#### Note the difference between ds (the dataset) and ad (a data object that has the full simulation domain).  This is in contrast to selecting a subregion.

This will come up again later.

But for now, let's make a plot!!
"""

px = yt.ProjectionPlot(ds, "x", ("gas", "density"))
px.show()

"""One of the strengths of yt is that we can get to a plot right away!

### Other things you can do with yt

Check what field values you have.
"""

ds.field_list

ds.derived_field_list

"""And some other parameters of the simulation:"""

print("left edge: ", ds.domain_left_edge)
print("right edge: ", ds.domain_right_edge)
print("center: ", ds.domain_center)

"""We can also print out the total mass.  Note that we are now using ad instead of ds."""

# total_mass returns a list, representing the total gas and dark matter + stellar mass, respectively
print([tm.in_units("Msun") for tm in ad.quantities.total_mass()])

"""###  Zoom in on a subregion

First, we can figure out where in the box has the highest density:
"""

density = ad["PartType0", "density"]
wdens = np.where(density == np.max(density))
coordinates = ad["PartType0", "Coordinates"]
center = coordinates[wdens][0]
print("center = ", center)

"""Set up a box to zoom into, using the location of thie highest density as the center:"""



new_box_size = ds.quan(250, "code_length")

left_edge = center - new_box_size / 2
right_edge = center + new_box_size / 2

print(new_box_size.in_units("Mpc"))
print(left_edge.in_units("Mpc"))
print(right_edge.in_units("Mpc"))

"""Now we can define a new sub-region with yt that is smaller box centered on the region of highest density."""

ad2 = ds.region(center=center, left_edge=left_edge, right_edge=right_edge)

"""We can print the total mass of our subregion as well!"""

print([tm.in_units("Msun") for tm in ad2.quantities.total_mass()])

"""Finally, we can plot just the zoomed in region!"""

px = yt.ProjectionPlot(ds, "x", ("gas", "density"), center=center, width=new_box_size)
px.show()

"""### Some other plots!

(I haven't polished the following plots and they may not be the best options for this exact simulation. However, this should give you some ideas for what you can do with yt.)

Try a temperature slice plot.
"""

sx = yt.SlicePlot(ds, "x", ("gas", "temperature"), center=center, width=new_box_size)
sx.show()

"""*Or* a gas velocity plot:"""

sx = yt.SlicePlot(ds, "x", ("gas", "velocity_magnitude"), center=center, width=new_box_size)
sx.show()

"""We can also change the orientation of the slice!"""

sy = yt.SlicePlot(ds, "y", ("gas", "density"), center=center, width=new_box_size)
sy.show()

"""What about adding velocity arrows?  Or temperature contours?"""

px = yt.ProjectionPlot(ds, "x", ("gas", "density"), center=[45, 45, 0.5], width=new_box_size)
px.annotate_velocity()
px.show()

px = yt.ProjectionPlot(ds, "x", ("gas", "density"), center=center, width=new_box_size)
px.annotate_contour(("gas", "temperature"))

#px.show()

"""How about a profile plot? (Note that you can pick which fields you plot against each other.)"""

prof = yt.ProfilePlot(ds, ("gas", "x"), ("gas", "temperature"), weight_field=None)

prof.show()

"""###  You can also extract the arrays to work with directly.

This gives you a list of every density in the selected region (e.g., ad vs. ad2):
"""

ad['gas', 'density']

"""This is now an array you can work with similarly to a numpy array!"""

np.max(ad['gas', 'density'])

plt.hist(ad['gas', 'temperature'].value)

"""# show particle data"""

cm = yt.make_colormap([([0.2,0.02,0.95], 10), ([0.5,0,1], 10), ([1,0,1], 10),([1,0.3,0.3],10),([1,0.5,0.1],0)],
p = yt.ParticlePhasePlot(
    ds,
    ("all", "particle_position_y"),
    ("all", "particle_position_z"),
    ("all", "particle_mass"),
)

p.set_unit(("all", "particle_mass"), "Msun")
p.set_unit(("all", "particle_position_y"), "kpc")
p.set_unit(("all", "particle_position_z"), "kpc")
cm = yt.make_colormap([([0.2,0.02,0.95], 10), ([0.5,0,1], 10), ([1,0,1], 10),([1,0.3,0.3],10),([1,0.5,0.1],0)],
    name="colorss",
    interpolate=True,)
p.set_cmap(field=("all", "particle_mass"), cmap="colorss")

p.show()

